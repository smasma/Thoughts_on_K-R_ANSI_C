CCHAPTER 1: A Tutorial Introduction

This text does not teach programming. It just tries to refresh some concepts and practices that may have changed over time. Also
includes some concepts that I found interesting and/or hard to understand in the last century. Moreover, this piece of writing
should be read along with K&R ANSI C for maximum value and benefit.

"Let us begin with a quick introduction to C." This is the first sentence in K&R ANSI C. The only issue that I have with K&R ANSI
C is: Can there be a quick introduction to C? Really, is that possible for a language like C, even coming from the designers of C.

C is powerful, flexible, fast, shifty. A quick introdcution is a difficult endeavor. For starters, K&R ANSI C is too consice, too
dense and too technical for people growing up on Python. And I have nothing against Python, its an amazing language with a huge 
library and great for data analytics, machine learning and other stuff. Plus its actively developed. I love Numpy and Matplotlib.

Anyways, now that the only gripe is out of the way lets dive into the flight manual that K&R ANSI C seemed to me when I first
looked at it. 

A bit about myself as a bit of introduction, so that we know each other. Grew up on BASIC, Apple clones and Apple II, Sinclair
QL, Commodore 64. Lost my way into a business education, what a waste of precious time...undergraduate business. MBA was great.
Came back to programming through quantitative work and have an interest in Quantum Computing and using C in AI applications. 

So here we go for a deep dive...

For beginners, how do you compile in the 21st century. Use this:

	gcc hello.c -o hello && ./hello

This compiles and runs in one go. To just compile:

	gcc hello.c -o hello

And to just run:

	./hello

You have to be in the directory in which your program is saved.

Well, that's how its done on Unix-like Linux etc. I will only be using the word Linux going forward to avoid the high sounding
jargon that I, though, love.

We now write:

	int main(void)
	
instead of :

	main()

Ok so what the hell is "\n" ??? Guys coming from a higher level language than C have a difficult time understanding \n. In C you
need to tell everything, or most everything that you want the machine or program to do. So if you print something, you want the
cursor to move to the next line. Otherwise, the next print command will print on the same line where you just printed something.
So you want to tell the computer to go to the next line left margin by typing \n at the end and before closing the quotes.
Unless, ofcourse, you want to stay on the same line.  

Command beginning with "\" are called "escape sequences" and there are quite a few of them. 

Commenting your code is recommended and anything between "/*" and "*/" is a comment and ignored by the compiler.

Single line comments can begin with "//" and the compiler ignores all text till the end of line. If your comment is multiline,
your next line will have to begin with "//".

	/* This is a comment and not read by compiler. */
	// This is a comment and not read by compiler.
	// This is another comment.
	
Simple enough so far. All variables have to be declared before they can be used i.e. we tell C that we will be using the letter "i" or the word "you" as a variable. We also need to give its "type". 

"Type" can be understood as a category of variable, which in turn depeds on how much space would the computer use to store it.
Bigger variable types are required to store big numbers and therefore need more memory. Small numbers can be stored in small
variable types and use lesser memory. 

Ints are whole numbers, Floats are numbers with fractional part e.g 3.14, Chars are alphabets primarily (ASCII or Latin-1
characters actually) and put in single quotes. Following is a list of major "types":

	short int
	unsigned short int
	int
	unsigned int
	long int
	unsigned long int
	long long int
	unsigned long long int  (We can drop "int" in many cases.)
	float
	double
	long double
	char	
	
You will normally be using only a handfull of these but it pays to know the whole list...especially when you are reading some
smart_aleck_code.
